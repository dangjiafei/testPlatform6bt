"""
Django settings for testPlatform6bt project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
import sys
import datetime
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

sys.path.append(os.path.join(BASE_DIR, 'apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '-%ex@*g=f6(kbzv%r6yek@#t%1@r0^734(zlfyew67ffic(vv5'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# 默认只能使用本地地址访问项目
ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',

    'users.apps.UsersConfig',
    'projects.apps.ProjectsConfig',
    'interfaces.apps.InterfacesConfig',
    'configures.apps.ConfiguresConfig',
    'debugtalks.apps.DebugtalksConfig',
    'envs.apps.EnvsConfig',
    'reports.apps.ReportsConfig',
    'testcases.apps.TestcasesConfig',
    'testsuites.apps.TestsuitesConfig',
    'summary.apps.SummaryConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # 跨域问题,需要添加在CommonMiddleware中间件之前
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


# CORS_ORIGIN_ALLOW_ALL为True，指定所有域名（IP）都可以访问后端接口，默认为False
CORS_ORIGIN_ALLOW_ALL = True


# 允许跨域时携带cookie，默认为False
CORS_ALLOW_CREDENTIALS = True


ROOT_URLCONF = 'testPlatform6bt.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'testPlatform6bt.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

# mysql数据库的配置
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # 连接数据库的类型
        'NAME': 'testPlatform6bt',  # 数据库名
        'HOST': '127.0.0.1',  # 数据库主机地址
        'PORT': 3306,  # 数据库的端口
        'USER': 'root',
        'PASSWORD': 'djf19950815@.',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'  # 中文
# LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'  # 东八区
# TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'


# REST_FRAMEWORK的配置

REST_FRAMEWORK = {
    # 默认响应渲染类
    'DEFAULT_RENDERER_CLASSES': (
        # Json渲染器为第一优先级
        'rest_framework.renderers.JSONRenderer',
        # 可浏览的API渲染器为第二优先级
        'rest_framework.renderers.BrowsableAPIRenderer'
    ),

    # django_filters.rest_framework.backends.DjangoFilterBackend
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.OrderingFilter'
    ],

    # DEFAULT_PAGINATION_CLASS全局指定分页引擎类
    'DEFAULT_PAGINATION_CLASS': 'utils.handle_pagination.PageNumberPagination',
    # 一定要指定, 每一页获取的条数
    'PAGE_SIZE': 10,

    # coreapi接口文档
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',

    # 指定认证类（认证方式），绝大多数情况下，会在全局指定认证类
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 指定JWT Token认证机制
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        # session会话认证
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication'
    ],
    
    # 指定权限类（认证通过之后，会授予的权限）
    # 往往不会在全局指定权限类
    # 'DEFAULT_PERMISSION_CLASSES': [
    # 默认的权限类为AllowAny，允许所有用户返回接口
    # 'rest_framework.permissions.AllowAny',
    # 指定只有登录之后，才具有访问接口的权限
    #     'rest_framework.permissions.IsAuthenticated',
    # ],
}


# a、可以在JWT_AUTH中覆盖jwt的全局配置信息
JWT_AUTH = {
    # b、指定自定义项目结果处理的函数
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'utils.handle_jwt.jwt_response_payload_handler',
    # c、指定token有效期，默认为5分钟
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),
    # d、修改前端创建token时，请求头值的前缀，默认JWT
    # e、在请求头中，Authorization: JWT 具体的token值
    # 'JWT_AUTH_HEADER_PREFIX': 'Bear',
}


# 指定使用自定义的用户模型
# AUTH_USER_MODEL = 'users.UserModel'


# 日志配置
LOGGING = {
    'version': 1,  # 日志的版本号
    'disable_existing_loggers': False,  # 日志处理器
    'formatters': {
        # 指定更详细的日志输出格式
        'verbose': {
            'format': '%(asctime)s - [%(levelname)s] - %(name)s - [msg]%(massage)s - [%(filename)s:%(lineno)d ]'
        },
        # 指定普通的日志输出格式
        'simple': {
            'format': '%(asctime)s - [%(levelname)s] - [msg]%(massage)s'
        },
    },
    # 指定日志的过滤器
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    # 定义日志的输出渠道
    'handlers': {
        # 指定控制台日志输出渠道
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        # 指定日志输出到文件的配置
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, "logs/test.log"),  # 文件的位置
            'maxBytes': 100 * 1024 * 1024,  # 每一个日志文件的最大字节数
            'backupCount': 10,  # 指定日志文件总数
            'formatter': 'verbose',
            'encoding': 'utf-8',
        },
    },
    'loggers': {
        # 定义一个名为log的日志器
        'log': {
            'handlers': ['console', 'file'],
            'propagate': True,  # 是否轮转
            'level': 'DEBUG',  # 日志器接收的最低日志级别
        },
    }
}


# 在全局配置文件中, 添加全局变量信息
REPORTS_DIR = os.path.join(BASE_DIR, 'reports')

# 在全局配置文件中, 指定用例存放的目录
SUITES_DIR = os.path.join(BASE_DIR, 'suites')

# 创建STATIC_ROOT, 存放静态文件的目录
STATIC_ROOT = os.path.join(BASE_DIR, "static")
